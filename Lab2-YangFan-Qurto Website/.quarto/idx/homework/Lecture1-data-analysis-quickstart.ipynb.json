{"title":"Data Analysis Quickstart","markdown":{"headingText":"Data Analysis Quickstart","containsRefs":false,"markdown":"\n(data-quickstart)=\n\n\n## Introduction\n\nHere we'll do a whistlestop tour of data analysis in Python using a structure called a *dataframe*. Dataframes do everything a spreadsheet does, and a *whole lot more*. At their simplest, dataframes are a tabular representation of data with rows and columns. The data in each column can be anything; text, numbers, Python objects such as lists or dictionaries, or even other dataframes!\n\nThe ability to extract, clean, and analyse data is one of the core skills any economist needs. Fortunately, the (open source) tools that are available for data analysis have improved enormously in recent years, and working with them can be a delight——even the most badly formatted data can be beaten into shape. You may be sceptical that these open source tools can be as powerful as the costly, closed source tools you may already know: but, over time, you'll come to see how they do far, far more, and do it faster too.\n\nIn this chapter, we'll see analysis on a *single* dataframe using the Star Wars' characters dataset as an example. For a more thorough grounding in using data, see the next chapter ({ref}`working-with-data`).\n\nThis chapter uses the [**pandas**](https://pandas.pydata.org/) and [**numpy**](https://numpy.org/) packages. If you're running this code, you may need to install these packages. The Anaconda distribution of Python comes with **pandas** and **numpy** installed. If you don't have these installed, you can install them by running either `conda install packagename` or `pip install packagename` on your computer's command line. You can find a brief guide to installing packages in {ref}`code-preliminaries`.\n\nThis chapter is hugely indebted to the fantastic [Python Data Science Handbook](https://jakevdp.github.io/PythonDataScienceHandbook/), and both the **pandas** [documentation](https://pandas.pydata.org/docs/user_guide/index.html) and amazing [introductory tutorials](https://pandas.pydata.org/pandas-docs/stable/getting_started/intro_tutorials/index.html).\n\n## Loading data and checking datatypes\n\nFirst we must import the packages we'll be using in the rest of this chapter.\n\nLoading data into a dataframe is achieved with commands like `df = pd.read_csv(...)` or `df = pd.read_stata(...)`. Let's load the Star Wars data from the internet:\n\n### Look at the first few rows with `head()`\n\n```{admonition} Exercise\nWhat happens if you pass a number to `head()`, eg `head(10)`?\n```\n\n## Filter rows and columns with conditions using `df.loc[condition(s) or row(s), column(s)]`\n\n`.loc` stands for location and allows you to filter (aka subset) a dataframe. `.loc` works like an index, so it always comes with square brackets, eg `df.loc[...]`.\n\n`loc` takes two arguments. The first is a list of the names of the rows that you'd like to select *or* a condition (ie a list of booleans with the same length as the dataframe) that selects certain rows. Remember, you can easily create a series of booleans by checking a column against a condition, for example `df['column1'] == 'black'`.\n\nThe second argument consists of a list of column names you'd like to select. In both cases, `:` is shorthand for 'use all rows' or 'use all columns'. If you have *either* condition(s) *or* column(s) (but not both), you can simply write `df[condition(s)]` or `df[column(s)]`.\n\nHere's an example with a condition built up out of two parts and a list of columns:\n\n```{admonition} Exercise\nUsing `loc`, filter the dataframe to `mass` greater than 50 for the `name` and `homeworld` columns\n```\n\n## Sort rows or columns with `.sort_values()`\n\nUse `sort_values(columns, ascending=False)` for descending order.\n\n```{admonition} Exercise\nUsing `sort_values()`, sort the dataframe by the `name` column.\n```\n\n## Choose multiple rows or columns using slices\n\nSlices can be passed by name using `.loc[startrow:stoprow:step, startcolumn:stopcolumn:step]` or by position using `.iloc[start:stop:step, start:stop:step]`.\n\nChoosing every 10th row from the second, and the columns between 'name' and 'gender':\n\nNote that `loc` only works here with numbers for rows because it just so happens that the names of the rows *are* numbers. If the rows had names that were strings, and we wanted to subset rows by their index position, we would have to use `iloc` instead.\n\nChoosing the first 5 rows and the last 2 columns by index position:\n\n```{admonition} Exercise\nUsing `.iloc`, display the first 6 rows and last 6 columns.\n```\n\n## Randomly selecting a sample using `.sample`\n\n`.sample(n)` randomly selects `n` rows, `.sample(frac=0.4)` selects 40% of the data, `replace=True` samples with replacement, and passing `weights=` selects a number or fraction with the probabilities given by the passed weights. (Note that weights passed should have the same length as the dataframe.)\n\nTaking a sample of 5 rows:\n\n```{admonition} Exercise\nUse `.sample()` to sample 5% of the dataframe.\n```\n\n## Rename with `.rename()`\n\nYou can rename all columns by passing a function, for instance `df.rename(columns=str.lower)` to put all columns in lower case. Alternatively, use a dictionary to say which columns should be mapped to what:\n\n## Add new columns with `.assign()` or assignment\n\nVery often you will want to create new columns based on existing columns.\n\n![](https://pandas.pydata.org/docs/_images/05_newcolumn_1.svg)\n\nThere are two ways to do this. Let's see them both with an example where we'd like to create a new column that contains height in metres, called `\"height_m:`.\n\n- The first, and most commonly used, is called *assignment* and involves just entering the new column name within your dataframe and putting it on the left-hand side of an assignment expression that has an operation based on existing dataframe columns on the right-hand side. For example, `df['height_m'] = df['height']/100`.\n- The second is to use the `assign()` method on a dataframe directly. In this case, the assignment statement appears inside the brackets but you don't need to write as much text because it's clear from the context that, on the left-hand side of the assignment, we're talking about the given dataframe. An example is `df.assign(height_m=df[\"height\"] / 100)`.\n\nLet's see working examples of both of these assignment methods.\n\nFirst let's use the assignment approach:\n\nAnd now with the `.assign()` function:\n\nThis was added to the end; ideally, we'd like it next to the height column, which we can achieve by sorting the columns (`axis=1`) alphabetically:\n\nTo overwrite existing columns just use `height = df['height']/100` with the `assign` method or `df['height'] = df['height']/100` with an assignment expression.\n\n```{admonition} Exercise\nAdd a new column that gives the ratio of mass to height.\n```\n\n## Summarise numerical values with `.describe()`\n\n\n\n## Group variables values with `.groupby()`\n\n\n\n```{admonition} Exercise\nFind the standard deviation (using `std()`) of masses by `homeworld`.\n```\n\n## Add transformed columns using `.transform()`\n\nQuite often, it's useful to put a column into a dataframe that is the result of an intermediate groupby and aggregation. For example, subtracting the group mean or normalisation. Transform does this and *returns a transformed column with the same shape as the original dataframe*. Transform preserves the original index. (There are other methods, such as apply, that return a new dataframe with the groupby variables as a new index.)\n\nBelow is an example of transform being used to demean a variable according to the mean by species. Note that we are using lambda functions here. Lambda functions are a quick way of writing functions without needing to give them a name, e.g. `lambda x: x+1` defines a function that adds one to x. In the example below, the `x` in the lambda function takes on the role of mass grouped by species.\n\n```{admonition} Exercise\nCreate a `height_demean_homeworld` column that gives the height column with the mean height by homeworld subtracted.\n```\n\n## Make quick charts with `.plot.*()`\n\nIncluding scatter, area, bar, box, density, hexbin, histogram, kde, and line.\n\n## Export results and descriptive statistics\n\nYou'll often want to export your results to a latex file for inclusion in a paper, presentation, or poster. Let's say we had some descriptive statistics on a dataframe:\n\nYou can export this to a range of formats, including string, html, xml, markdown, the *clipboard* (so you can paste it), Excel, and more. In your favourite IDE (integrated development environment) with a Python language server (eg Visual Studio Code, JupyterLab) start typing `table.to` and a list of possible methods beginning `to` should appear, including `to_string()`.\n\nHere is an example of exporting your **pandas** table to CSV (comma separated values):\n\nOne output format that doesn't conform to this is *LaTeX*, for which you need the following:\n\nWriting to the terminal isn't that useful for getting your paper or report done! To export to a file, use `table.style.to_latex('file.tex', ...)` for LaTeX and `table.to_csv('file.csv', ...)`.\n\n```{admonition} Exercise\nTry exporting the table above using the `to_string(\"table.txt\")` method.\n\nIf you are running this locally, the file should appear in the directory in which you are running this notebook.\n\nIf you are using Google Colab to do these exercises, you can check that the file exported by running `!ls` in a new code cell to see all files in the current notebook directory. To get the contents of the file you created, run `!cat table.txt`.\n```\n\n## Summary\n\nThis has been a quick tour of what **pandas** can do, and shows the power of this ubiquitous tool, but we've barely seen a fraction of its features. The next chapter will go deeper into how to use **pandas**.\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":false,"cache":false,"freeze":true,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles/index.css"],"toc":false,"output-file":"Lecture1-data-analysis-quickstart.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.39","theme":{"light":["cosmo","../styles/custom.scss"]}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}